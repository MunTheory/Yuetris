global ^

export macro RANDOM_RNG  = -> 0
export macro RANDOM_PRNG = -> 1
export macro RANDOM_SAME = -> 2

-- Each function should replicate math.random
const random =
	[$RANDOM_RNG]: (x, y) =>
		if y
			math.random x, y
		elseif x
			math.random x
		else
			math.random!
	[$RANDOM_PRNG]: (x, y) =>
		@seed = @seed ~ (@seed << 13)
		@seed = @seed ~ (@seed >> 17)
		@seed = @seed ~ (@seed << 5)

		if y
			math.floor x + ((y + 1 - x) / (math.maxinteger - 1)) * (math.abs @seed - 1)
		else if x
			math.floor 1 + (x / (math.maxinteger - 1)) * (math.abs @seed - 1)
		else
			(math.abs @seed - 1) / (math.maxinteger - 1)
	[$RANDOM_SAME]: (x, y) =>
		if y
			math.ceil math.max (math.min @seed, x), y
		elseif x
			math.ceil math.max (math.min @seed, 1), x
		else
			math.max (math.min @seed, 0), 1
--

export macro RANDOMIZER_RANDOM = -> 0
export macro RANDOMIZER_BAG    = -> 1

const randomizers =
	[$RANDOMIZER_RANDOM]: (data) => data[@random #data]
	[$RANDOMIZER_BAG]: (data) =>
		@queue ??= {}

		if #@queue == 0
			-- Append to queue
			for _ = 1, @iterations ?? 1
				for i = 1, #data
					@queue[] = data[i]

			-- Shuffle queue
			for i = #@queue, 1, -1
				j = @random 0, #@queue
				@queue[i], @queue[j] = @queue[j], @queue[i]

		table.remove @queue
--

return