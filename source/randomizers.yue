global ^

import "macros" as $

$REQUIRE "randoms"

-- What makes this system different from the other systems
-- is that the table is not defining instances, but instead
-- functions/values for an instance.
--
-- RANDOMIZER
-- random: a random-instance found in `randoms.yue`.
-- next: either a number (used to reference the table)
-- or a function, with `self, data` parameters. This function
-- should return an item from `data`; the order of how it
-- returns is not important.

const randomizers =
	-- A completely-random randomizer, utilizing the `random`
	-- field in the instance.
	[$RANDOMIZER_RANDOM]: (data) => data[randoms.next @random, #data]

	-- A randomizer that uses the 'bag' technique to generate
	-- random results in a pattern-like manner. `data` is pushed
	-- into a queue if-and-only-if `queue` is empty (can control
	-- the amount using `iterations`). `queue` is then popped until
	-- it's empty.
	[$RANDOMIZER_BAG]: (data) =>
		@queue ??= {}

		if #@queue == 0
			-- Append to queue
			for _ = 1, @iterations ?? 1
				for i = 1, #data
					@queue[] = data[i]

			-- Shuffle queue
			for i = #@queue, 1, -1
				j = randoms.next @random, 0, #@queue
				@queue[i], @queue[j] = @queue[j], @queue[i]

		table.remove @queue
--

export next = (data) => if "number" == type @next then randomizers[@next] @, data else @next data