global ^

import "macros" as $

const rotations =
	[$ROTATION_COMMON]:
		rotate: (instance, turn) => false
		row: (instance) => 0
		pieces: {}
	[$ROTATION_SRS]:
		rotate: (instance, turn) => false
		row: (instance) => 0
		pieces:
			[$PIECE_I]:
				width: 4
				height: 4
				orientations:
					* x: 1
						y: 2
						width: 4
						height: 1
						matrix:
							* { 0, 0, 0, 0 }
							* { 1, 1, 1, 1 }
							* { 0, 0, 0, 0 }
							* { 0, 0, 0, 0 }
					* x: 3
						y: 1
						width: 1
						height: 4
						matrix:
							* { 0, 0, 1, 0 }
							* { 0, 0, 1, 0 }
							* { 0, 0, 1, 0 }
							* { 0, 0, 1, 0 }
					* x: 1
						y: 3
						width: 4
						height: 1
						matrix:
							* { 0, 0, 0, 0 }
							* { 0, 0, 0, 0 }
							* { 1, 1, 1, 1 }
							* { 0, 0, 0, 0 }
					* x: 2
						y: 1
						width: 1
						height: 4
						matrix:
							* { 0, 1, 0, 0 }
							* { 0, 1, 0, 0 }
							* { 0, 1, 0, 0 }
							* { 0, 1, 0, 0 }
			[$PIECE_O]:
				width: 4
				height: 3
				orientations:
					* x: 2
						y: 1
						width: 2
						height: 2
						matrix:
							* { 0, 1, 1, 0 }
							* { 0, 1, 1, 0 }
							* { 0, 0, 0, 0 }
			[$PIECE_T]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 0, 1, 0 }
							* { 1, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 1 }
							* { 0, 1, 0 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 1 }
							* { 0, 1, 0 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 1, 1, 0 }
							* { 0, 1, 0 }
			[$PIECE_J]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 1, 0, 0 }
							* { 1, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 1 }
							* { 0, 1, 0 }
							* { 0, 1, 0 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 1 }
							* { 0, 0, 1 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 0 }
							* { 1, 1, 0 }
			[$PIECE_L]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 0, 0, 1 }
							* { 1, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 0 }
							* { 0, 1, 1 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 1 }
							* { 1, 0, 0 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 1, 1, 0 }
							* { 0, 1, 0 }
							* { 0, 1, 0 }
			[$PIECE_S]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 0, 1, 1 }
							* { 1, 1, 0 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 1 }
							* { 0, 0, 1 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 0, 1, 1 }
							* { 1, 1, 0 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 1, 0, 0 }
							* { 1, 1, 0 }
							* { 0, 1, 0 }
			[$PIECE_Z]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 1, 1, 0 }
							* { 0, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 0, 1 }
							* { 0, 1, 1 }
							* { 0, 1, 0 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 0 }
							* { 0, 1, 1 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 1, 1, 0 }
							* { 1, 0, 0 }
		kickdata:
			[$PIECE_NONE]:
				* clockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1,  1 }
						* {  0, -2 }
						* { -1, -2 }
					counterclockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1, -1 }
						* {  0,  2 }
						* {  1,  2 }
				* clockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1, -1 }
						* {  0,  2 }
						* {  1,  2 }
					counterclockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1,  1 }
						* {  0, -2 }
						* { -1, -2 }
				* clockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1,  1 }
						* {  0, -2 }
						* {  1, -2 }
					counterclockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1, -1 }
						* {  0,  2 }
						* { -1,  2 }
				* clockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1, -1 }
						* {  0,  2 }
						* { -1,  2 }
					counterclockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1,  1 }
						* {  0, -2 }
						* {  1, -2 }
			[$PIECE_I]:
				* clockwise:
						* {  0,  0 }
						* { -2,  0 }
						* {  1,  0 }
						* { -2, -1 }
						* {  1,  2 }
					counterclockwise:
						* {  0,  0 }
						* {  2,  0 }
						* { -1,  0 }
						* {  2,  1 }
						* { -1, -2 }
				* clockwise:
						* {  0,  0 }
						* { -1,  0 }
						* {  2,  0 }
						* { -1,  2 }
						* {  2, -1 }
					counterclockwise:
						* {  0,  0 }
						* {  1,  0 }
						* { -2,  0 }
						* {  1, -2 }
						* { -2,  1 }
				* clockwise:
						* {  0,  0 }
						* {  2,  0 }
						* { -1,  0 }
						* {  2,  1 }
						* { -1, -2 }
					counterclockwise:
						* {  0,  0 }
						* { -2,  0 }
						* {  1,  0 }
						* { -2, -1 }
						* {  1,  2 }
				* clockwise:
						* {  0,  0 }
						* {  1,  0 }
						* { -2,  0 }
						* {  1, -2 }
						* { -2,  1 }
					counterclockwise:
						* {  0,  0 }
						* { -1,  0 }
						* {  2,  0 }
						* { -1,  2 }
						* {  2, -1 }
--

macro US             = -> "rotation @"
macro US_PIECE       = -> "piece @, identifier"
macro US_ORIENTATION = -> "orientation @, identifier, index"

macro COMMON             = -> "rotations?[$ROTATION_COMMON]"
macro COMMON_PIECE       = -> "$COMMON?.pieces?[identifier]"
macro COMMON_ORIENTATION = -> "$COMMON_PIECE?.orientations?[index]"

export rotation = =>
	if "number" == type @
		return rotations?[@] ?? $COMMON
	@ ?? $COMMON

export rotate = (instance, turn) =>
	($US?.rotate ?? $COMMON?.rotate) @, instance, turn

export row = (instance) =>
	(US?.row ?? $COMMON?.row) @, instance

export pieces = =>
	US?.pieces ?? $COMMON?.pieces

export piece = (identifier) =>
	(pieces @)?[identifier] ?? $COMMON_PIECE

export matrix_width = (identifier) =>
	$US_PIECE?.width ?? $COMMON_PIECE?.width

export matrix_height = (identifier) =>
	$US_PIECE.height ?? $COMMON_PIECE?.height

export orientations = (identifier) =>
	$US_PIECE?.orientations ?? $COMMON_PIECE?.orientations

export orientation = (identifier, index) =>
	(orientations @, identifier)?[index] ?? $COMMON_ORIENTATION

export x = (identifier, index) =>
	$US_ORIENTATION?.x ?? $COMMON_ORIENTATION?.x

export y = (identifier, index) =>
	$US_ORIENTATION?.y ?? $COMMON_ORIENTATION?.y

export width = (identifier, index) =>
	$US_ORIENTATION?.width ?? $COMMON_ORIENTATION?.width

export height = (identifier, index) =>
	$US_ORIENTATION?.height ?? $COMMON_ORIENTATION?.height

export matrix = (identifier, index) =>
	$US_ORIENTATION?.matrix ?? $COMMON_ORIENTATION?.matrix