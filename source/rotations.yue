global ^

import "macros" as $

const rotations =
	[$ROTATION_COMMON]:
		rotate: (instance, turn) => false
		row: (instance) => 0
		pieces: {}
	[$ROTATION_SRS]:
		rotate: (instance, turn) => false
		row: (instance) => 0
		pieces:
			[$PIECE_I]:
				width: 4
				height: 4
				orientations:
					* x: 1
						y: 2
						width: 4
						height: 1
						matrix:
							* { 0, 0, 0, 0 }
							* { 1, 1, 1, 1 }
							* { 0, 0, 0, 0 }
							* { 0, 0, 0, 0 }
					* x: 3
						y: 1
						width: 1
						height: 4
						matrix:
							* { 0, 0, 1, 0 }
							* { 0, 0, 1, 0 }
							* { 0, 0, 1, 0 }
							* { 0, 0, 1, 0 }
					* x: 1
						y: 3
						width: 4
						height: 1
						matrix:
							* { 0, 0, 0, 0 }
							* { 0, 0, 0, 0 }
							* { 1, 1, 1, 1 }
							* { 0, 0, 0, 0 }
					* x: 2
						y: 1
						width: 1
						height: 4
						matrix:
							* { 0, 1, 0, 0 }
							* { 0, 1, 0, 0 }
							* { 0, 1, 0, 0 }
							* { 0, 1, 0, 0 }
			[$PIECE_O]:
				width: 4
				height: 3
				orientations:
					* x: 2
						y: 1
						width: 2
						height: 2
						matrix:
							* { 0, 1, 1, 0 }
							* { 0, 1, 1, 0 }
							* { 0, 0, 0, 0 }
			[$PIECE_T]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 0, 1, 0 }
							* { 1, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 1 }
							* { 0, 1, 0 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 1 }
							* { 0, 1, 0 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 1, 1, 0 }
							* { 0, 1, 0 }
			[$PIECE_J]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 1, 0, 0 }
							* { 1, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 1 }
							* { 0, 1, 0 }
							* { 0, 1, 0 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 1 }
							* { 0, 0, 1 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 0 }
							* { 1, 1, 0 }
			[$PIECE_L]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 0, 0, 1 }
							* { 1, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 0 }
							* { 0, 1, 1 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 1 }
							* { 1, 0, 0 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 1, 1, 0 }
							* { 0, 1, 0 }
							* { 0, 1, 0 }
			[$PIECE_S]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 0, 1, 1 }
							* { 1, 1, 0 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 0, 1, 1 }
							* { 0, 0, 1 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 0, 1, 1 }
							* { 1, 1, 0 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 1, 0, 0 }
							* { 1, 1, 0 }
							* { 0, 1, 0 }
			[$PIECE_Z]:
				width: 3
				height: 3
				orientations:
					* x: 1
						y: 1
						width: 3
						height: 2
						matrix:
							* { 1, 1, 0 }
							* { 0, 1, 1 }
							* { 0, 0, 0 }
					* x: 2
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 0, 1 }
							* { 0, 1, 1 }
							* { 0, 1, 0 }
					* x: 1
						y: 2
						width: 3
						height: 2
						matrix:
							* { 0, 0, 0 }
							* { 1, 1, 0 }
							* { 0, 1, 1 }
					* x: 1
						y: 1
						width: 2
						height: 3
						matrix:
							* { 0, 1, 0 }
							* { 1, 1, 0 }
							* { 1, 0, 0 }
		kickdata:
			[$PIECE_NONE]:
				* clockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1,  1 }
						* {  0, -2 }
						* { -1, -2 }
					counterclockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1, -1 }
						* {  0,  2 }
						* {  1,  2 }
				* clockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1, -1 }
						* {  0,  2 }
						* {  1,  2 }
					counterclockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1,  1 }
						* {  0, -2 }
						* { -1, -2 }
				* clockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1,  1 }
						* {  0, -2 }
						* {  1, -2 }
					counterclockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1, -1 }
						* {  0,  2 }
						* { -1,  2 }
				* clockwise:
						* {  0,  0 }
						* { -1,  0 }
						* { -1, -1 }
						* {  0,  2 }
						* { -1,  2 }
					counterclockwise:
						* {  0,  0 }
						* {  1,  0 }
						* {  1,  1 }
						* {  0, -2 }
						* {  1, -2 }
			[$PIECE_I]:
				* clockwise:
						* {  0,  0 }
						* { -2,  0 }
						* {  1,  0 }
						* { -2, -1 }
						* {  1,  2 }
					counterclockwise:
						* {  0,  0 }
						* {  2,  0 }
						* { -1,  0 }
						* {  2,  1 }
						* { -1, -2 }
				* clockwise:
						* {  0,  0 }
						* { -1,  0 }
						* {  2,  0 }
						* { -1,  2 }
						* {  2, -1 }
					counterclockwise:
						* {  0,  0 }
						* {  1,  0 }
						* { -2,  0 }
						* {  1, -2 }
						* { -2,  1 }
				* clockwise:
						* {  0,  0 }
						* {  2,  0 }
						* { -1,  0 }
						* {  2,  1 }
						* { -1, -2 }
					counterclockwise:
						* {  0,  0 }
						* { -2,  0 }
						* {  1,  0 }
						* { -2, -1 }
						* {  1,  2 }
				* clockwise:
						* {  0,  0 }
						* {  1,  0 }
						* { -2,  0 }
						* {  1, -2 }
						* { -2,  1 }
					counterclockwise:
						* {  0,  0 }
						* { -1,  0 }
						* {  2,  0 }
						* { -1,  2 }
						* {  2, -1 }
--

macro COMMON = -> "rotations?[$ROTATION_COMMON]"

export rotation = =>
	if "number" == type @
		return rotations?[@] ?? $COMMON
	@ ?? $COMMON

export rotate = (instance, turn) =>
	((rotation @)?.rotate ?? $COMMON?.rotate) @, instance, turn

export row = (instance) =>
	((rotation @)?.row ?? $COMMON?.row) @, instance

export pieces = =>
	(rotation @)?.pieces ?? $COMMON?.pieces

export piece = (identifier) =>
	(pieces @)?[identifier] ?? $COMMON?.pieces?[identifier]

export matrix_width = (identifier) =>
	(piece @ identifier)?.width ?? $COMMON?.pieces?[identifier]?.width

export matrix_height = (identifier) =>
	(piece @ identifier)?.height ?? $COMMON?.pieces?[identifier]?.height

export orientations = (identifier) =>
	(piece @ identifier)?.orientations ?? $COMMON?.pieces?[identifier]?.orientations

export orientation = (identifier, index) =>
	(orientations @ identifier)?[index] ?? $COMMON?.pieces?[identifier]?.orientations[index]

export x = (identifier, index) =>
	(orientation @ identifier)?.x ?? $COMMON?.pieces?[identifier]?.orientations[index]?.x

export y = (identifier, index) =>
	(orientation @ identifier)?.y ?? $COMMON?.pieces?[identifier]?.orientations[index]?.y

export width = (identifier, index) =>
	(orientation @ identifier)?.width ?? $COMMON?.pieces?[identifier]?.orientations[index]?.width

export height = (identifier, index) =>
	(orientation @ identifier)?.height ?? $COMMON?.pieces?[identifier]?.orientations[index]?.height

export matrix = (identifier, index) =>
	(orientation @ identifier)?.matrix ?? $COMMON?.pieces?[identifier]?.orientations[index]?.matrix